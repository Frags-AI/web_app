generator client {
  provider = "prisma-client-js"
  output   = "../src/clients/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  clerk_user_id String   @unique
  stripe_id     String?
  full_name     String?

  subscription Subscription?
  projects     Project[]
  videos       Video[]
  platforms    Platform[]
}

model Project {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user_id    String
  task_id    String?
  status     String   @default("SUCCESS")
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  identifier String
  title      String
  videos     Video[]

  @@unique([user_id, title])
}

model Video {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  name       String
  task_id    String?
  status     String   @default("SUCCESS")
  project_id String
  user_id    String

  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  project Project @relation(fields: [project_id], references: [id], onDelete: Cascade)
}

model Subscription {
  id           String    @id @default(uuid())
  stripe_id    String
  user_id      String    @unique
  status       String
  plan         String
  period_start DateTime
  period_end   DateTime
  trial_start  DateTime
  trial_end    DateTime
  created_at   DateTime  @default(now())
  deleted_at   DateTime?
  user         User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Platform {
  id          String @id @default(uuid())
  user_id     String
  provider    String
  scope       String
  name        String
  details     String
  email       String
  external_id String

  user  User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  token OAuthToken?

  @@unique([user_id, provider, scope, external_id])
}

model OAuthToken {
  id            String    @id @default(uuid())
  platform_id   String    @unique
  access_token  String
  refresh_token String?
  token_type    String?
  expiry_date   DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  platform Platform @relation(fields: [platform_id], references: [id], onDelete: Cascade)
}
